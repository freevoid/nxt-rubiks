const char PEDESTAL_PORT = OUT_A;
const char HAND_PORT = OUT_B;
const char CAMERA_PORT = OUT_C;

bool HELP_VERTICAL_TURN = false;
int STRONG_HORIZONTAL_TURN_POWER = 50;
int NORMAL_HORIZONTAL_TURN_POWER = 20;

int pedestal_angle = 0;
int pedestal_angle_error = 0;
int hand_angle = 0;
int hand_angle_error = 0;

sub smart_hand_turn(int angle, int strength) {
    angle -= hand_angle_error;
    int predicted_angle = hand_angle + angle;
    RotateMotor(HAND_PORT, strength, angle);
    hand_angle = MotorTachoCount(HAND_PORT);
    hand_angle_error = hand_angle - predicted_angle;
    TextOut(LCD_LINE3, 5, StrCat(NumToStr(hand_angle), " ", NumToStr(hand_angle_error), "     "));
    if (abs(hand_angle) > 3600) {
        hand_angle = 0;
        ResetTachoCount(HAND_PORT);
    }
}
sub smart_platform_turn(int angle, int strength) {
    angle -= pedestal_angle_error;
    int predicted_angle = pedestal_angle + angle;
    RotateMotor(PEDESTAL_PORT, strength, angle);
    pedestal_angle = MotorTachoCount(PEDESTAL_PORT);
    pedestal_angle_error = pedestal_angle - predicted_angle;
    TextOut(LCD_LINE2, 5, StrCat(NumToStr(pedestal_angle), " ", NumToStr(pedestal_angle_error), "     "));
    if (pedestal_angle > 3600) {
        pedestal_angle = 0;
        ResetTachoCount(PEDESTAL_PORT);
    }
}

sub ConfigureHorizontalTurnPower(int normal, int strong) {
    STRONG_HORIZONTAL_TURN_POWER = strong;
    NORMAL_HORIZONTAL_TURN_POWER = normal;
}

sub VerticalTurn() {
    Off(PEDESTAL_PORT);
    RotateMotor(HAND_PORT, 88, 65);
    Wait(400);
    if (HELP_VERTICAL_TURN) {
        RotateMotor(HAND_PORT, 50, -45);
        RotateMotor(HAND_PORT, 88, 15);
        Wait(100);
        RotateMotor(HAND_PORT, 50, -35);
    } else {
        RotateMotor(HAND_PORT, 50, -65);
    }
}

sub HorizontalTurn(int count, bool strong) {
    int strength = strong ? STRONG_HORIZONTAL_TURN_POWER : NORMAL_HORIZONTAL_TURN_POWER;
    int angle;
    if (count == 1) {
        angle = 90;
    }
    if (count == 2) {
        angle = 180;
    }
    if (count == 3) {
        angle = -90;
    }

    smart_platform_turn(angle, strength);
}

sub Move(int count, int power, int degree) {
    RotateMotor(HAND_PORT, power, degree);
    Off(HAND_PORT);
    HorizontalTurn(count, true); 
    RotateMotor(HAND_PORT, power, -degree);
}

/*
task main() {
    pedestal_angle = MotorTachoCount(PEDESTAL_PORT);
    RotateMotor(PEDESTAL_PORT, 20, -pedestal_angle);
    HorizontalTurn(1, false);
    VerticalTurn();
    Move(2);
    VerticalTurn();
    HorizontalTurn(3, false);
}
*/

